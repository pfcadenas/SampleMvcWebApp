@model IEnumerable<ServiceLayer.PostServices.SimplePostDto>

@{
    ViewBag.Title = "Posts";
}

<h2>Posts</h2>

@if (TempData["message"] != null)
{
    <div class="text-success">@TempData["message"]</div><br />
}
@if (TempData["errorMessage"] != null)
{
    <div class="text-danger"><strong>@TempData["errorMessage"]</strong></div>
}

<p>
    This is a demonstration of <a href="https://github.com/JonPSmith/GenericServices" target="_blank">GenericServices'</a>
    database CRUD (Create, Read, Update/Edit and Delete) services done synchronously, i.e no wait states to improve web site capacity.
    (See @Html.ActionLink("Posts Async", "Index", "PostsAsync") for async versions of the same commands).
</p>
<p>
    Below you will see a table of posts which can be manipulated. We have chosen a POST as an example as it has the following attributes: 
</p>
<ul>
    <li>When we list them we want 'shape' what the user sees, i.e. we leave out the post content but include the blogger Name and Tags.</li>
    <li>The create and edit commands are non-trivial because Posts links to other tables, like author and the tags.</li>
</ul> 
<hr/>

<div>
    <span> @if (Request.IsAuthenticated) { @Html.ActionLink("Create New Post", "Create") <span>|</span> @Html.ActionLink("Tags Page", "Index", "Tags")    <span>|</span> @Html.ActionLink("Blogs Page", "Index", "Blogs")    <span>|</span> @Html.ActionLink("Reset Blogs data", "Reset") }</span>
    <span class="pull-right"><strong>@Html.ActionLink("Explanation of the code", "CodeView")</strong></span>
</div>

<form action="index" method="get" style="margin:10px">
    <div class="form-inline pull-right">
        <div class="form-group">
            <div class="col-md-12">
                <label class="control-label">Content</label>
                <input id="content" name="content" type="text" value="" class="form-control">
            </div>
        </div>        
        <div class="form-group">
            <div class="col-md-12">
                <label class="control-label">Blog</label>
                <select id="blogsSelect" name="blog" type="text" value="" class="form-control">
                    <option value="0" >--Seleccione--</option>
                </select>
            </div>
        </div>
        <button class="btn btn-sm btn-primary"><i class="glyphicon glyphicon-search"></i> Buscar</button>
    </div>
</form>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.BloggerName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Title)
        </th>
        <th style="text-align:center">
            @Html.DisplayNameFor(model => model.LikeCount)
        </th>
        <th>
            Last updated
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TagNames)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.BloggerName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td style="text-align:center">
                @if (Request.IsAuthenticated && !item.LikeName.Contains(User.Identity.Name))
                { <i data-post-id="@item.PostId"  data-post-like="@item.LikeCount" id="userLike" class="glyphicon glyphicon-thumbs-up" style="color:#48b719;cursor:pointer"></i> }
                @Html.DisplayFor(modelItem => item.LikeCount)                
            </td>
            <td>
                @item.LastUpdatedUtc.ToShortDateString()
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TagNames)
            </td>
            <td>
                @if (Request.IsAuthenticated) { @Html.ActionLink("Edit", "Edit", new { id = item.PostId }) <span>|</span> }
                @Html.ActionLink("Details", "Details", new { id=item.PostId }) 
                @if (Request.IsAuthenticated) { <span>|</span> @Html.ActionLink("Delete", "Delete", new { id = item.PostId }) }
            </td>
        </tr>
    }

</table>

<span>
    @Html.ActionLink("Delay for 500ms (Sync)", "Delay")
     Useful for checking capacity of web server
</span>

@section scripts
    {
        <script>
            $(document).ready(function(){
                $("#userLike, #userDoNotLike").on("click", function () {
                    var button = $(this);
                    $.ajax({
                        url: "/api/post/like/",
                        method: "POST",
                        data: {
                            PostID: button.attr("data-post-id")
                        },
                        success: function (response) {
                            button.parents("td").html(parseInt(button.attr("data-post-like")) + 1);
                        }
                    });
                });               

                //function for load filter Blog
                $.ajax({
                    url: '/api/blogs',
                    method: 'GET',
                    success: function (blogs) {
                        for (var i = 0; i< blogs.length; i++) {
                            $('#blogsSelect').append('<option value="' + blogs[i].BlogId + '">' + blogs[i].Name + '</option>');
                        };
                        
                    }
                });                

            });
        </script>
    }

